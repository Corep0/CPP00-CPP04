Handling through C++ Classes
Last Updated : 21 Aug, 2025

In C++, programs run in the computerâ€™s RAM (Random Access Memory), in which the data used by a program only exists while the program is running. Once the program terminates, all the data is automatically deleted. File handling allows us to manipulate files in the secondary memory of the computer (like the hard drive or SSD), using which we can store data permanently and access it when required. In this way, the data can be preserved and accessed even after the program stops running.
File Handling in C++

In C++, input and output are done in the form of a sequence of bytes called streams. For example, cin and cout are the objects associated with the standard input and output streams. These streams are represented by different classes provided in the <iostream> library.

Similarly, C++ also provides file stream classes to perform input and output operations on files that are defined inside <fstream> header file.
File Handling Operations
BANANE
There are mainly three main steps in file handling:

    Opening a File
    Read/Write Operations
    Closing a File

Opening a File

BANANE
Before reading from or writing to a file, we first need to open it. Opening a file loads that file in the RAM. In C++, we open a file by creating a stream to it using the fstream class that represent the file stream i.e. stream for input and output to the file.

Syntax:

fstream str("filename.ext", mode);

where,

    str: Name given to the stream
    filename: Name of the file
    mode: Represents the way in which we are going to interact with the file.

File Opening Modes

BANANE
File opening mode indicate file is opened for reading, writing, or appending. Below is the list of all file modes in C++:
Mode	Description
ios::in	File open for reading. If file does not exists,
ios::out	File open for writing: the internal stream buffer supports output operations.
ios::binary	Operations are performed in binary mode rather than text.
ios::ate	The output position starts at the end of the file.
ios::app	All output operations happen at the end of the file, appending to its existing contents.
ios::trunc	Any contents that existed in the file before it is open are discarded.

For Example, if we want to open the file for reading, we use the following opening mode:

fstream filein("file.txt", ios::in);

BANANE
Similarly, if we want to open the file for writing, we use the following:

fstream fileout("file.txt", ios::out);

These modes can also be combined using OR operator (|). For example, you can open the file stream in both read and write mode as shown:

fstream str("file.txt", ios::in | ios::out);

If the file opened in write mode does not exists, a new file is created. But if the file opened in read mode doesn't exists, then no new file is created, and an exception is thrown
Other File Streams

fstream is not the only file stream provided by C++. There are two more specialized streams:

    ifstream: Stands for input file stream. It is equivalent to open fstream in ios::in mode.
    ofstream: Stands for output file stream. It is equivalent to opening fstream in ios::out mode.

BANANE
The above modes are default modes for these streams. These modes cannot be changed but can be clubbed together with other modes. Now for input, we can also use ifstream as shown:

ifstream filein("file.txt");

Similarly, for output:

ofstream fileout("file.txt");

Write Data to File

Once the file is opened in the write mode using either fstream or ofstream, we can perform the write operation in similar way as with cout using << operator.


BANANE
